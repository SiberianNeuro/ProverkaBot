from contextlib import suppress
from typing import Union

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ForceReply
from loguru import logger
from sqlalchemy import select, and_, func, not_
from sqlalchemy.orm import sessionmaker

from app.keyboards.main_kb import keyboard_generator
from app.keyboards.register_kb import RegCallback, get_confirm, get_clusters_keyboard
from app.models.kazarma import KazarmaUser, KazarmaRole
from app.models.doc import User
from app.services.config import Config
from app.utils.states import Register

router = Router()
router.message.filter(F.chat.type == 'private')
router.callback_query.filter(F.message.chat.type == 'private')


@router.callback_query(RegCallback.filter(F.param == 'register'))
async def get_fullname(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û.\n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>.\n'
                              '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ /start –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".',
                              reply_markup=ForceReply(input_field_placeholder='–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'))
    await state.set_state(Register.fullname)


@router.message(Register.fullname)
async def get_info(msg: types.Message, db_session: sessionmaker, state: FSMContext):
    print(msg.text.title().strip())
    stmt = select(
        [
            func.CONCAT_WS(' ', KazarmaUser.lastname, KazarmaUser.firstname, KazarmaUser.middlename).label('fullname'),
            KazarmaUser.id,
            KazarmaUser.role_id,
            KazarmaRole.name
        ]
    ).join(KazarmaRole).filter(
        and_(
            func.CONCAT_WS(' ', KazarmaUser.lastname, KazarmaUser.firstname, KazarmaUser.middlename)
            .ilike('%' + msg.text.title().strip() + '%'),
            KazarmaUser.active == 1,
            not_(KazarmaUser.email.contains('@mobile.test'))
        )
    )
    print(stmt)
    async with db_session() as session:
        temp_user = await session.execute(stmt)
        temp_users = temp_user.mappings().all()
        await session.commit()
    temp_users = [dict(user.items()) for user in temp_users]
    if not temp_users:
        await msg.answer('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–µ".'
                         ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –∑–∞–ø–æ–ª–Ω–∏–ª –∏–º—è.')
        return
    elif len(temp_users) > 1:
        await state.update_data(temp_users=temp_users)
        text = '–Ø –Ω–∞—à–µ–ª –≤ "–ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–µ" —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n'
        for num, user in enumerate(temp_users, 1):
            text += f'<b>{num}. {user["fullname"]}</b>\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user["name"]}'
        text += '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –∏–∑ –Ω–∏—Ö –≤–µ—Ä–Ω—ã–π'
        await msg.answer(text=text, reply_markup=await get_confirm(temp_users))
    else:
        await state.update_data(temp_users=temp_users[0])
        text = f'–ù–∞—à–µ–ª –≤ "–ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–µ" –∞–∫–∫–∞—É–Ω—Ç:\n\n' \
               f'<b>{temp_users[0]["fullname"]}</b>' \
               f'\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {temp_users[0]["name"]}' \
               f'\n–ï—Å–ª–∏ —è –ø—Ä–∞–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
        await msg.answer(text=text, reply_markup=await get_confirm(temp_users[0]))
    await state.set_state(Register.confirm)


@router.callback_query(RegCallback.filter(F.param == 'confirm'), Register.confirm)
async def get_cluster(call: types.CallbackQuery, state: FSMContext, db_session: sessionmaker,
                      callback_data: RegCallback, bot: Bot, config):
    if callback_data.value == 0:
        with suppress(TelegramBadRequest):
            await call.message.edit_text('–¢–æ–≥–¥–∞ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –§–ò–û –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.', reply_markup=None)
        await state.set_state(Register.fullname)
        return
    await call.message.delete()
    user_data = await state.get_data()
    user_data: Union[list, dict] = user_data['temp_users']
    if isinstance(user_data, list):
        for data in user_data:
            if data['id'] == callback_data.value:
                user_data = data
                break
        await state.update_data(temp_users=user_data)
    if user_data['role_id'] in (5, 17, 29, 30):
        async with db_session() as session:
            result = await session.execute(select(User).filter(User.kazarma_id == user_data['role_id']))
            t_user = result.first()
            if t_user:
                with suppress(TelegramBadRequest):
                    await call.message.edit_text('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. '
                                                 '–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
                                                 reply_markup=None)
                await state.clear()
                await session.commit()
                return
            session.add(
                User(
                    id=call.from_user.id,
                    fullname=user_data['fullname'],
                    kazarma_id=user_data['id'],
                    role_id=user_data['role_id'],
                    role_name=user_data['name'],
                    cluster_id=18,
                    is_admin=True,
                )
            )

            await session.commit()
        with suppress(TelegramBadRequest):
            await call.message.edit_text(f'–í—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòé\n'
                                         f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data["fullname"].split()[1]}!',
                                         reply_markup=None)
        checking_group = await bot.get_chat(chat_id=config.misc.checking_group)
        await call.message.answer(f'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –∞–≥–≥—Ä–µ–≥–∏—Ä—É–µ—Ç—Å—è –≤ –¥–∞—à–±–æ—Ä–¥. '
                                  f'–í–æ—Ç <a href="https://datastudio.google.com/reporting/343994ec-faad-4bf1-8e2e-71ee8c398ff9">'
                                  f'—Å—Å—ã–ª–∫–∞</a> –Ω–∞ –Ω–µ–≥–æ.\n\n'
                                  f'–ö–ª–∏–µ–Ω—Ç–æ–≤ —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—ë - {checking_group.invite_link}'
                                  f'\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π - –Ω–∞–ø–∏—à–∏ /help')
        logger.opt(lazy=True).log(
            'REGISTRATION',
            f'User {user_data["fullname"]} completely registered as admin'
        )
    else:
        with suppress(TelegramBadRequest):
            await call.message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É:',
                                      reply_markup=await get_clusters_keyboard(db_session))
        await state.set_state(Register.cluster)


@router.callback_query(Register.cluster, RegCallback.filter(F.param == "cluster"))
async def finish_registration(call: types.CallbackQuery, state: FSMContext, db_session: sessionmaker,
                              callback_data: RegCallback, bot: Bot, config: Config):
    raw_data = await state.get_data()
    user_data = raw_data['temp_users']
    is_checking = True if callback_data.value > 11 else False
    user = User(
        id=call.from_user.id,
        fullname=user_data['fullname'],
        kazarma_id=user_data['id'],
        role_id=user_data['role_id'],
        role_name=user_data['name'],
        cluster_id=callback_data.value,
        is_checking=is_checking
    )
    async with db_session() as session:
        await session.merge(user)
        await session.commit()
    with suppress(TelegramBadRequest):
        await call.message.edit_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data["fullname"].split()[1]}!', reply_markup=None)
    if callback_data.value > 11:
        checking_group = await bot.get_chat(config.misc.checking_group)
        await call.message.answer('–¢–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ.\n'
                                  '–ö–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É, '
                                  '–≤—Å—Ç—É–ø–∏ –≤ –Ω–µ—ë –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n'
                                  f'üëâ {checking_group.invite_link}\n\n'
                                  f'–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π - –Ω–∞–ø–∏—à–∏ /help',
                                  reply_markup=await keyboard_generator(user))
        logger.opt(lazy=True).log(
            'REGISTRATION',
            f'User {user_data["fullname"]} completely registered as checker user'
        )
    else:
        await call.message.answer(f'–ß—Ç–æ —è —É–º–µ—é:\n'
                                  f'–ù–∞–∂–º–∏ <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚ñ∂Ô∏è"</b>, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, '
                                  f'–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏\n\n'
                                  f'–ù–∞–∂–º–∏ <b>"–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è üõë"</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, '
                                  f'–ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ.\n\n'
                                  f'–ù–∞–∂–º–∏ <b>"–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Excel-—Ç–∞–±–ª–∏—Ü—É —Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ '
                                  f'–∏ –∏—Ö —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ.\n'
                                  f'–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ.\n'
                                  f'<a href="https://datastudio.google.com/reporting/3c3ddd97-6589-4304-ad33-0cbf4e690b75">'
                                  f'–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ</a>.',
                                  reply_markup=await keyboard_generator(user))
        logger.opt(lazy=True).log(
            'REGISTRATION',
            f'User {user_data["fullname"]} completely registered as common user'
        )
