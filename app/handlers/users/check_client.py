from contextlib import suppress
from datetime import datetime

from aiogram import Router, types, F, Bot
from aiogram.exceptions import TelegramBadRequest, TelegramUnauthorizedError, TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import ForceReply
from loguru import logger
from sqlalchemy import select, func
from sqlalchemy.orm import sessionmaker

from app.filters.common import CheckerFilter
from app.keyboards.checking_kb import CheckingCallback, get_choice_keyboard, get_answer_keyboard
from app.keyboards.load_kb import SendCallback
from app.models.doc import Ticket, User, TicketHistory
from app.utils.states import Checking

router = Router()
router.message.filter(F.chat.type == 'private', CheckerFilter())
router.callback_query.filter(CheckerFilter())


@router.callback_query(F.message.chat.type.in_({"group", "supergroup"}), SendCallback.filter(F.param == 'check'))
async def get_group_check_start(call: types.CallbackQuery, state: FSMContext, db_session: sessionmaker,
                                callback_data: SendCallback, user: User, bot: Bot, config):
    group_state = await state.storage.get_state(
        bot,
        key=StorageKey(bot_id=bot.id, chat_id=config.misc.checking_group, user_id=call.from_user.id)
    )
    current_state = await state.get_state()
    if current_state and current_state.startswith('Checking') \
            and group_state and group_state.startswith('Checking'):
        await call.answer('–°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏.', show_alert=True)
        return
    answer_text = ''
    async with db_session() as session:
        ticket: Ticket = await session.get(Ticket, callback_data.value)
        type_ticket = '–ê–ø–µ–ª–ª—è—Ü–∏—è' if ticket.status_id == 5 else '–ó–∞—è–≤–∫–∞'
        if ticket.status_id == 2:
            answer_text = f'‚ùï <u>—É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.</u>'
        elif ticket.status_id in (3, 4):
            answer_text = f'‚ùï <u>—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:</u> {"–æ–¥–æ–±—Ä–µ–Ω–∞" if ticket.status_id == 3 else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"}.'
        elif ticket.status_id in (1, 5):
            answer_text = f'üîÑ <i>–ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–º</i> @{call.from_user.username}\n' \
                          f'–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{datetime.now().strftime("%d.%m.%Y %H:%M:%S")}</b>'
            try:
                session.add(
                    TicketHistory(
                        ticket_id=ticket.id,
                        sender_id=call.from_user.id,
                        status_id=2
                    )
                )
                await session.merge(Ticket(id=callback_data.value, status_id=2, updated_at=func.now()))

            except Exception as e:
                logger.error(e)
                await call.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', show_alert=True)
                await session.rollback()
                return
            await state.update_data(author_id=callback_data.user_id)
            with suppress(TelegramBadRequest):
                await call.message.edit_text(call.message.html_text + '\n\n' + answer_text, reply_markup=None)
            await bot.send_message(
                call.from_user.id,
                f'–ù–∞—á–Ω–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞.\n–°—Å—ã–ª–∫–∞: {ticket.link}\n'
                f'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:'
                f' "–û–¥–æ–±—Ä–∏—Ç—å" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å".',
                reply_markup=await get_choice_keyboard(ticket.id)
            )
            await state.set_state(Checking.choice)
            await state.storage.set_state(
                bot, key=StorageKey(bot_id=bot.id, chat_id=call.from_user.id, user_id=call.from_user.id),
                state=Checking.choice
            )
            logger.opt(lazy=True).log('CHECK',
                                      f'User {user.fullname} started checking client (ID: {callback_data.value})')


@router.callback_query(CheckingCallback.filter(F.param == "choice"), Checking.choice)
async def get_check_choice(call: types.CallbackQuery, state: FSMContext, callback_data: CheckingCallback):
    await state.update_data(ticket_id=callback_data.ticket_id, choice=callback_data.choice)
    answer_text = '–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ.'
    await call.message.delete()
    await call.message.answer(answer_text,
                              reply_markup=ForceReply(input_field_placeholder='–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ'))
    await state.set_state(Checking.comment)


@router.message(Checking.comment, F.chat.type == 'private')
async def get_check_comment(msg: types.Message, state: FSMContext, db_session: sessionmaker, user: User,
                            bot: Bot, config):
    if msg.content_type != 'text':
        await msg.answer('–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ —Ñ–∞–π–ª–æ–≤, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø—Ä–æ—á–µ–≥–æ.')
        return
    ticket_info = await state.get_data()
    ticket_id, choice = ticket_info['ticket_id'], ticket_info['choice']
    async with db_session() as session:
        try:
            current_ticket: Ticket = await session.get(Ticket, int(ticket_id))
            result = await session.execute(select(User.id).filter(
                User.kazarma_id.in_((current_ticket.doc_id, current_ticket.law_id))
            ))
            users = result.scalars().all()
            ticket = TicketHistory(
                ticket_id=int(ticket_id),
                sender_id=msg.from_user.id,
                comment=msg.text,
                status_id=choice
            )

            session.add(ticket)
            await session.merge(Ticket(id=int(ticket_id), status_id=choice, comment=msg.text, updated_at=func.now()))
            await session.commit()
            logger.opt(lazy=True).log('CHECK',
                                      f'User {user.fullname} '
                                      f'{"approved" if choice == 3 else "rejected"} '
                                      f'client ticket (ID: {ticket_id})')
        except Exception as e:
            logger.error(e)
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
            await session.rollback()
            return
    await msg.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    await state.clear()
    await state.storage.set_state(
        bot, key=StorageKey(bot_id=bot.id, chat_id=config.misc.checking_group, user_id=msg.from_user.id),
        state=None
    )
    await state.storage.set_data(bot,
                                 StorageKey(bot_id=bot.id, chat_id=config.misc.checking_group,
                                            user_id=msg.from_user.id),
                                 data={}
                                 )
    if choice == 4:
        for u in users:
            try:
                await bot.send_message(
                    chat_id=u,
                    text=f'–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω üòí:\n{ticket.link}\n\n'
                         f'<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ</i>:\n{msg.text}',
                    reply_markup=await get_answer_keyboard(ticket_id)
                )
            except (TelegramUnauthorizedError, TelegramForbiddenError):
                continue
