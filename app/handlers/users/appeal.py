import asyncio
from contextlib import suppress
from datetime import datetime
from typing import Union

from aiogram import Router, F, Bot, types
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.fsm.context import FSMContext
from aiogram.types import ForceReply
from loguru import logger
from sqlalchemy import select, func, and_

from sqlalchemy.orm import sessionmaker

from app.filters.common import CommonFilter
from app.keyboards.checking_kb import CheckingCallback
from app.keyboards.load_kb import get_check_keyboard
from app.keyboards.main_kb import keyboard_generator
from app.models.doc import TicketHistory, Ticket, User
from app.services.config import Config
from app.utils.states import Appeal
from app.utils.validator import validate_appeal

router = Router()
router.message.filter(F.chat.type == 'private', CommonFilter())
router.callback_query.filter(F.message.chat.type == 'private', CommonFilter())


@router.callback_query(CheckingCallback.filter(F.param == "appeal"), F.message.chat.type == 'private')
async def start_appeal(call: types.CallbackQuery, state: FSMContext, callback_data: CheckingCallback,
                       db_session: sessionmaker):
    appeal: Union[Ticket, str] = await validate_appeal(db_session, callback_data.ticket_id)
    if isinstance(appeal, str):
        with suppress(TelegramBadRequest):
            await call.message.edit_text(call.message.html_text + '\n\n' + appeal, reply_markup=None)
        return
    await call.message.delete()
    await call.message.answer(f'{"–ê–ø–µ–ª–ª—è—Ü–∏—è" if appeal.status_id == 4 else "–ö–∞—Å—Å–∞—Ü–∏—è"} –ø–æ –∫–ª–∏–µ–Ω—Ç—É:\n'
                              f'<a href="{appeal.link}">{appeal.fullname}</a>\n\n'
                              f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫ –∞–ø–µ–ª–ª—è—Ü–∏–∏ (–Ω–µ –±–æ–ª–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤).',
                              reply_markup=ForceReply(input_field_placeholder='–¢–µ–∫—Å—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏'))
    await state.update_data(
        ticket_id=callback_data.ticket_id,
        new_status=5 if appeal.status_id == 4 else 6
    )
    await state.set_state(Appeal.comment)


@router.message(Appeal.comment)
async def send_appeal(msg: types.Message, state: FSMContext, user: User, db_session: sessionmaker, config: Config,
                      bot: Bot):
    if msg.content_type != 'text':
        await msg.answer('–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ —Ñ–∞–π–ª–æ–≤, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø—Ä–æ—á–µ–≥–æ.')
        return
    state_data = await state.get_data()
    ticket_id, new_status_id = list(map(int, state_data.values()))

    appeal_text = msg.text
    async with db_session() as session:
        try:
            ticket = await session.get(Ticket, ticket_id)
            if ticket.status_id in (5, 6):
                await msg.answer("–í–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –∞–ø–µ–ª–ª—è—Ü–∏–∏ —Ç–≤–æ–π –∫–æ–ª–ª–µ–≥–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É —É–∂–µ —É—Å–ø–µ–ª –µ—ë –ø–æ–¥–∞—Ç—å.")
                return
            session.add(TicketHistory(
                ticket_id=ticket_id,
                sender_id=msg.from_user.id,
                status_id=new_status_id,
                comment=appeal_text
            ))
            ticket.status_id = new_status_id
            ticket.comment = appeal_text
            ticket.updated_at = func.now()

            await session.commit()
        except Exception as e:
            logger.error(e)
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
            await session.rollback()
            return
    await msg.answer(f'–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É:\n<b><a href="{ticket.link}">{ticket.fullname}</a></b>\n\n'
                     f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', reply_markup=await keyboard_generator(user))
    successful = False
    await state.clear()
    appeal_type = "üü° –ê–ø–µ–ª–ª—è—Ü–∏—è" if new_status_id == 5 else "üî¥ –ö–∞—Å—Å–∞—Ü–∏—è"
    while not successful:
        try:
            await bot.send_message(
                chat_id=config.misc.checking_group,
                text=f' <b>{appeal_type} –ø–æ –∫–ª–∏–µ–Ω—Ç—É</b>:\n'
                     f'<b><a href="{ticket.link}">{ticket.fullname}</a></b>\n\n'
                     f'<u>–ê–≤—Ç–æ—Ä:</u>\n{user.fullname} @{msg.from_user.username}\n'
                     f'–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: <b>{datetime.now().strftime("%d.%m.%Y %H:%M:%S")}</b>\n\n'
                     f'<i>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</i>\n{appeal_text}',
                reply_markup=await get_check_keyboard(ticket_id)
            )
            logger.opt(lazy=True).log('APPEAL', f'User {user.fullname} sent appeal for client (type: {appeal_type} |'
                                                f'ID: {ticket.id})')
            successful = True
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)



