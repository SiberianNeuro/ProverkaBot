from aiogram import types, F

from aiogram import Router
from aiogram.filters import CommandStart, Command, Text
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.keyboards.main_kb import keyboard_generator
from app.keyboards.register_kb import start_button
from app.models.doc import User
from app.models.kazarma import KazarmaUser
from app.utils.statistic import get_rejected_clients

router = Router()
router.message.filter(F.chat.type == "private")


@router.message(CommandStart())
async def start(msg: types.Message, user: User, state: FSMContext, db_session):
    current_state = await state.get_state()
    if current_state and current_state.startswith('Checking'):
        await msg.answer('–°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—è–≤–∫–∏.')
        return
    await state.clear()
    if not user:
        await msg.answer('–ü—Ä–∏–≤–µ—Ç üññ\n'
                         '–Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤.\n'
                         '–í–∏–∂—É, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –¥–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!',
                         reply_markup=await start_button())
    else:
        await get_rejected_clients(db_session, user)
        await msg.answer(f'–ü—Ä–∏–≤–µ—Ç, {user.fullname.split()[1]} üññ\n'
                         f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏ /help', reply_markup=await keyboard_generator(user))


@router.message(Command(commands=["cancel"]))
@router.message(Text(text="–æ—Ç–º–µ–Ω–∞", ignore_case=True))
async def cmd_cancel(msg: types.Message, state: FSMContext, user: User):
    current_state = await state.get_state()
    if current_state and current_state.startswith('Checking'):
        await msg.answer('–°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—è–≤–∫–∏.')
        return
    await state.clear()
    await msg.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await keyboard_generator(user)
    )


@router.message(Command(commands=["help"]))
async def command_help(msg: types.Message, user: User):
    if not user.is_admin and not user.is_checking:
        await msg.answer('–ß—Ç–æ —è —É–º–µ—é:\n'
                         '–ù–∞–∂–º–∏ <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚ñ∂Ô∏è"</b>, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, '
                         '–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏\n'
                         '–ö–Ω–æ–ø–∫–∞ <b>"–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã üîª"</b> –≤–µ—Ä–Ω–µ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n'
                         '–ö–Ω–æ–ø–∫–∞ <b>"–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"</b> –≤–µ—Ä–Ω–µ—Ç —Ç–µ–±–µ Excel-—Ç–∞–±–ª–∏—á–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ '
                         '–∏ –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏')
    if user.is_checking:
        await msg.answer('–ß—Ç–æ —è —É–º–µ—é:\n'
                         '')